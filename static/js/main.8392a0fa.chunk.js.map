{"version":3,"sources":["app_components/form.component.jsx","app_components/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","loadweather","error","type","placeholder","name","autoComplete","role","Weather","cityname","weatherIcon","temp_celcius","min","max","maxminTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","App","getWeather","e","a","preventDefault","country","target","elements","value","city","focus","fetch","result","json","response","setState","sys","main","weather","celcius","convertToCelcius","temp","getWeatherIcon","weathericon","id","console","log","alert","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","weatherIDRange","this","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8392a0fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props =>{\r\n    return(\r\n        <div className=\"container h-100\">\r\n            <form onSubmit={props.loadweather}>\r\n                <div>{props.error?error():\"\"}</div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"City\"\r\n                        name=\"city\"\r\n                        autoComplete=\"off\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Country\"\r\n                        name=\"country\"\r\n                        autoComplete=\"off\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mt-md-0 mt-2 text-md-left\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n\r\nconst error = props =>{\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country.....!\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport \"./weather.style.css\";\r\nconst Weather = props =>{\r\n    return(\r\n        <div className=\"container text-light\">\r\n            <div className=\"Card\">\r\n                <h1 className=\"text-white py-3\">{props.cityname}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`}/>\r\n                </h5>\r\n\r\n                {/* Get Celcius */}\r\n                {props.temp_celcius?(\r\n                    <h1 className=\"py-2\">{props.temp_celcius}&deg;</h1>\r\n                ):null}\r\n\r\n                {/* show max & min temp */}\r\n                {maxminTemp(props.temp_min,props.temp_max)}\r\n\r\n                {/* weather description */}\r\n                <h4 className=\"py-3\">\r\n                    {props.description.charAt(0).toUpperCase()+props.description.slice(1)}\r\n                </h4>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n\r\nfunction maxminTemp(min,max){\r\n    if(max&&min){\r\n        return(\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Form from './app_components/form.component';\nimport Weather from './app_components/weather.component';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\n\n//openweathermap.org apikey\n const api_key=\"12fedfd654ba4fb6479923bec83a0907\";\n\n class App extends React.Component{\n   constructor(){\n     super();\n     this.state={\n       city:undefined,\n       country:undefined,\n       icon:undefined,\n       celcius:undefined,\n       temp_min:null,\n       temp_max:null,\n       description:'',\n       error:false\n\n     };\n\n     //weather icons based on weather\n     this.weathericon={\n       Thunderstorm:\"wi-thunderstorm\",\n       Drizzle:\"wi-sleet\",\n       Rain:\"wi-storm-showers\",\n       Snow:\"wi-snow\",\n       Atmosphere:\"wi-fog\",\n       Clear:\"wi-day-sunny\",\n       Clouds:\"wi-day-fog\"\n     };\n   }\n\n   //specify icon based on weather\n   getWeatherIcon(icons,weatherIDRange){\n     switch(true){\n       case weatherIDRange>=200 && weatherIDRange<232:\n         this.setState({icon:icons.Thunderstorm});\n         break;\n       case weatherIDRange>=300 && weatherIDRange<=321:\n         this.setState({icon:icons.Drizzle});\n         break;\n       case weatherIDRange>=500 && weatherIDRange<=521:\n         this.setState({icon:icons.Rain});\n         break;\n       case weatherIDRange>=600 && weatherIDRange<=622:\n         this.setState({icon:icons.Snow});\n         break;\n       case weatherIDRange>=701 && weatherIDRange<=781:\n         this.setState({icon:icons.Atmosphere});\n         break;\n       case weatherIDRange===800:\n         this.setState({icon:icons.Clear});\n         break;\n       case weatherIDRange>=801 && weatherIDRange<=804:\n         this.setState({icon:icons.Clouds});\n         break;\n       default:\n        this.setState({icon:icons.Clouds});\n     }\n   }\n\n   //convert to celcius\n   convertToCelcius(temp){\n     let celcius=Math.floor(temp-273.15);\n     return celcius;\n   }\n\n   //event handler for onSubmit button in form component\n   getWeather = async e =>{\n     e.preventDefault();\n    \n      //get city and country name from input fields\n      const country=e.target.elements.country.value;\n      const city=e.target.elements.city.value;\n\n      //clear input fields\n     e.target.elements.country.value=\"\";\n     e.target.elements.city.value=\"\";\n\n    //get back typing line focus to city input\n    e.target.city.focus();\n\n     if(country && city){\n       try{\n       const result=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},q=${country}&appid=${api_key}`);\n        \n       const response=await result.json();\n\n       //get values from api specify to state \n       this.setState({\n         city:`${response.name},${response.sys.country}`,\n         country:response.sys.country,\n         main:response.weather[0].main,\n         celcius:this.convertToCelcius(response.main.temp),\n         temp_min:this.convertToCelcius(response.main.temp_min),\n         temp_max:this.convertToCelcius(response.main.temp_max),\n         description:response.weather[0].description,\n         error:false\n       });\n\n       //set icons\n       this.getWeatherIcon(this.weathericon,response.weather[0].id);\n       \n       console.log(response);\n      }catch(error){\n        alert('City you are searching is not found!');\n      }\n     }else{\n       this.setState({error:true});\n     }\n\n   };\n\n   render(){\n     return(\n       <div className=\"App\">\n         <Form loadweather={this.getWeather} error={this.state.error}/>\n         <Weather\n         cityname={this.state.city}\n         weatherIcon={this.state.icon}\n         temp_celcius={this.state.celcius}\n         temp_min={this.state.temp_min}\n         temp_max={this.state.temp_max}\n         description={this.state.description}\n         />                                                          \n       </div>\n     ); \n   }\n\n }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}